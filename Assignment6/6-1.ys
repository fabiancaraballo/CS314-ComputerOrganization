init:	irmovl Stack, %esp  	# Set up stack pointer  
	    irmovl Stack, %ebp  	# Set up base pointer   
	    call Main		# Execute main program
	    halt			# Terminate program 

# Array of 10 elements
	.align 4	
array:	.long 0x0010
	    .long 0x0009
	    .long 0x0008
	    .long 0x0007
	    .long 0x0006
	    .long 0x0005
	    .long 0x0004
	    .long 0x0003
	    .long 0x0002
	    .long 0x0001
	    
	    
Main:  pushl %ebp
        rrmovl %esp,%ebp
        irmovl $10, %eax
        pushl %eax              # Push 10
        irmovl array,%edx
        pushl %edx              # Push array
        call bubbleSort         # bubbleSort(array, 10)
        rrmovl %ebp,%esp
        popl %ebp
        ret
	 
	 
# int bubbleSort(int*, int)
bubbleSort:	pushl %ebp
            rrmovl %esp,%ebp
            pushl %ebx
            mrmovl 8(%ebp),%ecx     
            mrmovl 12(%ebp),%edx   
	        andl %edx, %edx        
	        je End
	

#Outer Loop
Loop:
        mrmovl 8(%ebp),%ecx     
        mrmovl (%ecx), %esi     
        mrmovl 4(%ecx), %edi   
        irmovl $-1, %ebx       
        xorl %eax,%eax          
        addl %ebx,%edx          
        jne Loopl               
        jmp Loop


#Inner Loop
Loopl:
        irmovl $1,%ebx
        addl %ebx, %eax  
        rrmovl %esi, %ebx 
        subl %edi, %ebx  
        jle Shift 
        rrmovl %esi, %ebx 
        rmmovl %edi, (%ecx)
        rmmovl %ebx, 4(%ecx)
        jmp Shift
    
    
Shift:
        rrmovl %edx, %ebx
        subl %eax, %ebx   #i - j
        je Loop
        irmovl $4,%ebx
        addl %ebx,%ecx 
        mrmovl (%ecx), %esi  
        mrmovl 4(%ecx), %edi
        jmp Loopl
    
    
End:
        popl %ebx 
        rrmovl %ebp,%esp
        popl %ebp
        ret



# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:
	 
