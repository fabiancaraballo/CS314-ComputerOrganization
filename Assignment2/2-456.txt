Assignment 2 Parts 4,5,6

Part 4- hex value to decimal (2's complement)
a)0x000000FF = 11111111
	= ((2^7)*1) + ((2^6)*1) + ((2^5)*1) + ((2^4)*1) + ((2^3)*1) + ((2^2)*1) + ((2^1)*1) + ((2^0)*1)
	= 128+64+32+16+8+4+2+1 
	= 255

b)0xFFFFFCE6 = 1111-1111-1111-1111-1111-1100-1110-0110
	= ((2^31)*-1) + ((2^30)*1) + ((2^29)*1) + ((2^28)*1) + ((2^27)*1) + ((2^26)*1) + ((2^25)*1) + ((2^24)*1) ((2^23)*-1) + ((2^22)*1) + ((2^21)*1) + ((2^20)*1) ((2^19)*-1) + ((2^18)*1) + ((2^17)*1) + ((2^16)*1) ((2^15)*-1) + ((2^14)*1) + ((2^13)*1) + ((2^12)*1) ((2^11)*-1) + ((2^10)*0) + ((2^9)*0) + ((2^8)*1) ((2^7)*-1) + ((2^6)*1) + ((2^5)*0) + ((2^4)*0) + ((2^3)*-1) + ((2^2)*1) + ((2^1)*1) + ((2^0)*0)
	= -2147483648 + 1073741824 + 536870912 + 268435456 + 134217728 + 67108864 + 33554432 + 16777216 + 8388608 + 4194304 + 2097152 + 1048576 + 524288 + 262144 + 131072 + 65536 +32768 + 16384 + 8192 + 4096 + 2048 + 1024 + 0 + 0 + 128 + 62 + 32 + 0 + 0 + 4 + 2 + 0
	= -794

c)0xFFFFFFFF = 1111-1111-1111-1111-1111-1111-1111-1111
	= ((2^31)*-1) + ((2^30)*1) + ((2^29)*1) + ((2^28)*1) + ((2^27)*1) + ((2^26)*1) + ((2^25)*1) + ((2^24)*1) ((2^23)*-1) + ((2^22)*1) + ((2^21)*1) + ((2^20)*1) ((2^19)*-1) + ((2^18)*1) + ((2^17)*1) + ((2^16)*1) ((2^15)*-1) + ((2^14)*1) + ((2^13)*1) + ((2^12)*1) ((2^11)*-1) + ((2^10)*0) + ((2^9)*0) + ((2^8)*1) ((2^7)*-1) + ((2^6)*1) + ((2^5)*0) + ((2^4)*0) + ((2^3)*-1) + ((2^2)*1) + ((2^1)*1) + ((2^0)*0)
	= -2147483648 + 1073741824 + 536870912 + 268435456 + 134217728 + 67108864 + 33554432 + 16777216 + 8388608 + 4194304 + 2097152 + 1048576 + 524288 + 262144 + 131072 + 65536 +32768 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 62 + 32 + 16 + 8 + 4 + 2 + 1
	= -1


Part 5- hex value to decimal IEEE754 single precision floating-point numbers

a) 0x80000000
	= 10000000000000000000000000000000
		-split it up into 3 parts 
			= 1 | 00000000 | 00000000000000000000000
				= the first part 1, determines a negative
				= the second part is a binary number 00000000, which comes out to 0
				= and the third part is the all zeroes so the answer is 0.0.
					= (0*(2^-1)) + (0 * (2^-2)) + (0*(2^-3)) + (0 * (2^-4)) + (0*(2^-5)) + (0 * (2^-6)) +(0*(2^-7)) + (0*(2^-8))
	= -0.0

b) 0x41220000
	= 01000001001000100000000000000000
		-split it up into 3 parts 
			= 0 | 10000010 | 01000100000000000000000
				= the first part 0, determines a positive
				= the second part is a binary number 10000010, which comes out to 130
				= and the third part is 01000100000000000000000 so the equation is : 
					= (0*(2^-1)) + (1 * (2^-2)) + (0*(2^-3)) + (0 * (2^-4)) +(0*(2^-5)) + (1 * (2^-6)) +(0*(2^-7)) + (0*(2^-8))
	= the decimal comes out to be 10.125
c) 0xC39D0000
	= 11000011100111010000000000000000
		-split it up into 3 parts 
			= 1 | 10000111 | 00111010000000000000000
				= the first part 1, determines a negative
				= the second part is a binary number 10000111, which comes out to 135.
				= and the third part is 00111010000000000000000 so the equation is : 
					= (0*(2^-1)) + (0 * (2^-2)) + (1*(2^-3)) + (1 * (2^-4)) +(1*(2^-5)) + (0 * (2^-6)) +(1*(2^-7)) + (0*(2^-8))
	= the decimal comes out to be -314.00


Part 6 - Decimal to Hex ecnoded as IEEE 754 single precision floating points number

a) 1.0
	-1. The decimal is positive so the first 31st bit is 0
	-2. Take keep diving decimal by 2^(-n-1) starting with -1 til we get a decimal in the range of [1<=x<2]
		- 1.0
	-3. The power is 0.
	-4. Write the fraction in binary:
		-1.0
			= 00111111110000000000000000000000 
	= 0x3F800000

b) 8.25
	-1. The decimal is positive so the first 31st bit is 0
	-2. Take keep diving decimal by 2^(-n-1) starting with -1 til we get a decimal in the range of [1<=x<2]
		- 1.03125
	-3. The power is 3.
	-4. Write the fraction in binary:
		-1.03125
			= 01000001000000100000000000000000 
	= 0x41040000

c) -25.125 
	-1. The decimal is positive so the first 31st bit is 0
	-2. Take keep diving decimal by 2^(-n-1) starting with -1 til we get a decimal in the range of [1<=x<2]
		- 1.5703125
	-3. The power is 4.
	-4. Write the fraction in binary:
		-1.5703125
			= 11000001110010010000000000000000 
	= 0xC1C90000
	
























